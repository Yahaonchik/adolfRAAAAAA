import { useEffect, useRef, useState } from 'react';
import { Rive, Layout, Fit, Alignment } from '@rive-app/canvas';
import RepairPrices from './RepairPrices';

interface ProblemData {
  title: string;
  description: string;
  color: string;
}

export default function SimpleRive() {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const riveInstanceRef = useRef<Rive | null>(null);
  const [selectedProblem, setSelectedProblem] = useState<number | null>(null);

  const problemsData: Record<number, ProblemData> = {
    1: {
      title: "üö™ –ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–≤–µ—Ä—Ü–µ–π",
      description: "–î–≤–µ—ÄÔøΩÔøΩ–∞ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∏–ª–∏ –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è",
      color: "from-red-500 to-red-700"
    },
    2: {
      title: "üíß –ü—Ä–æ–±–ª–µ–º–∞ —Å –≤–æ–¥–æ–π",
      description: "–ù–µ –Ω–∞–±–∏—Ä–∞–µ—Ç –≤–æ–¥—É –∏–ª–∏ –Ω–µ —Å–ª–∏–≤–∞–µ—Ç",
      color: "from-blue-500 to-blue-700"
    },
    3: {
      title: "‚ö° –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–∂–∏–º–æ–º",
      description: "–ù–µ –æ—Ç–∂–∏–º–∞–µ—Ç –±–µ–ª—å–µ –∏–ª–∏ –ø–ª–æ—Ö–æ –æ—Ç–∂–∏–º–∞–µ—Ç",
      color: "from-green-500 to-green-700"
    },
    4: {
      title: "üîá –ü—Ä–æ–±–ª–µ–º–∞ —Å —à—É–º–æ–º",
      description: "–ú–∞—à–∏–Ω–∞ –∏–∑–¥–∞–µ—Ç —Å—Ç—Ä–∞–Ω–Ω—ã–µ –∑–≤ÔøΩÔøΩ–∫–∏",
      color: "from-purple-500 to-purple-700"
    },
    5: {
      title: "üå°Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –Ω–∞–≥—Ä–µ–≤–æ–º",
      description: "–í–æ–¥–∞ –Ω–µ –Ω–∞–≥—Ä–µ–≤–∞–µ—Ç—Å—è –∏–ª–∏ –ø–µ—Ä–µ–≥—Ä–µ–≤–∞–µ—Ç—Å—è",
      color: "from-orange-500 to-orange-700"
    },
    6: {
      title: "‚è∞ –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏",
      description: "–ü—Ä–æ–≥—Ä–∞–º–º—ã –Ω–µ –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –∏–ª–∏ –∑–∞–≤–∏—Å–∞—é—Ç",
      color: "from-indigo-500 to-indigo-700"
    },
    21: {
      title: "üö™ –î–≤–µ—Ä—Ü–∞ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è",
      description: "–î–≤–µ—Ä—Ü–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏ –Ω–µ –æ—Ç–∫ÔøΩÔøΩ—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —Å—Ç–∏—Ä–∫–∏",
      color: "from-red-600 to-red-800"
    },
    22: {
      title: "üíß –ù–µ –Ω–∞–±–∏—Ä–∞–µ—Ç –≤–æ–¥—É",
      description: "–ú–∞—à–∏–Ω–∫–∞ –Ω–µ –Ω–∞–±–∏—Ä–∞–µ—Ç –≤–æ–¥—É –≤ –Ω–∞—á–∞–ª–µ —Ü–∏–∫–ª–∞ —Å—Ç–∏—Ä–∫–∏",
      color: "from-blue-600 to-blue-800"
    },
    23: {
      title: "üí® –ù–µ –æ—Ç–∂–∏–º–∞–µ—Ç",
      description: "–ë–µ–ª—å–µ –æ—Å—Ç–∞–µ—Ç—Å—è –º–æ–∫—Ä—ã–º –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã",
      color: "from-cyan-600 to-cyan-800"
    },
    24: {
      title: "‚è∏Ô∏è –ó–∞–≤–∏—Å–∞–µ—Ç –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–µ",
      description: "–°—Ç–∏—Ä–∞–ª—å–Ω–∞—è –º–∞ÔøΩÔøΩ–∏–Ω–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å—Ç–∏—Ä–∫–∏",
      color: "from-yellow-600 to-yellow-800"
    },
    25: {
      title: "üåä –í–æ–¥–∞ –Ω–µ —Å–ª–∏–≤–∞–µ—Ç—Å—è",
      description: "–ü–æ—Å–ª–µ —Å—Ç–∏—Ä–∫–∏ –≤ –±–∞—Ä–∞–±–∞–Ω–µ –æ—Å—Ç–∞–µ—Ç—Å—è –≤–æ–¥–∞",
      color: "from-teal-600 to-teal-800"
    },
    26: {
      title: "ü•Å –ù–µ –∫—Ä—É—Ç–∏—Ç –±–∞—Ä–∞–±–∞–Ω",
      description: "–ë–∞—Ä–∞–±–∞–Ω –Ω–µ –≤—Ä–∞—â–∞–µ—Ç—Å—è –≤–æ –≤—Ä–µ–º—è —Å—Ç–∏—Ä–∫–∏",
      color: "from-gray-600 to-gray-800"
    },
    27: {
      title: "üî• –ù–µ –Ω–∞–≥—Ä–µ–≤–∞–µ—Ç –≤–æ–¥—É",
      description: "–í–æ–¥–∞ –æ—Å—Ç–∞–µ—Ç—Å—è —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ –≤—Ä–µ–º—è —Å—Ç–∏—Ä–∫–∏",
      color: "from-orange-600 to-orange-800"
    },
    28: {
      title: "üí¶ –ü—Ä–æ—Ç–µ–∫–∞–µ—Ç",
      description: "–ò–∑ –º–∞—à–∏–Ω–∫–∏ –≤—ã—Ç–µ–∫–∞–µ—Ç –≤–æ–¥–∞ –Ω–∞ –ø–æ–ª",
      color: "from-blue-700 to-blue-900"
    },
    29: {
      title: "üîä –®—É–º–∏—Ç –ø—Ä–∏ –æ—Ç–∂–∏–º–µ",
      description: "–í–æ –≤—Ä–µ–º—è –æ—Ç–∂–∏–º–∞ –º–∞—à–∏–Ω–∫–∞ –∏–∑–¥–∞–µ—Ç –≥—Ä–æ–º–∫–∏–µ –∑–≤—É–∫–∏",
      color: "from-purple-700 to-purple-900"
    },
    30: {
      title: "‚ö° –ù–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è",
      description: "–°—Ç–∏—Ä–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞ –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫",
      color: "from-red-700 to-red-900"
    }
  };

  const openProblemOverlay = (problemId: number) => {
    console.log(`üîß Opening problem ${problemId} overlay`);
    setSelectedProblem(problemId);
  };

  const closePriceFrame = () => {
    setSelectedProblem(null);
  };

  useEffect(() => {
    if (!canvasRef.current) return;

    const riveInstance = new Rive({
      src: '/untitled.riv',
      canvas: canvasRef.current,
      layout: new Layout({
        fit: Fit.Contain,
        alignment: Alignment.Center,
      }),
      autoplay: true,
      stateMachines: 'State Machine 1',
      onLoad: () => {
        console.log('üéØ Rive –∑–∞–≥—Ä—É–∂–µ–Ω —Å state machine');
      },
      onLoadError: (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Rive:', error);
      },
    });

    riveInstanceRef.current = riveInstance;

    // –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ü–û–î–†–û–ë–ù–ê–Ø –û–¢–õ–ê–î–ö–ê statechange —Å–æ–±—ã—Ç–∏–π
    riveInstance.on('statechange', (event) => {
      console.log('üö® ===== RIVE STATECHANGE EVENT START =====');
      console.log('üîÑ Raw event:', event);
      console.log('üîÑ Event type:', typeof event);
      console.log('üîÑ Event constructor:', event?.constructor?.name);
      console.log('üîÑ Event is array:', Array.isArray(event));

      if (event) {
        console.log('üîÑ Event keys:', Object.keys(event));
        console.log('üîÑ Event values:', Object.values(event));
        console.log('üîÑ Event entries:', Object.entries(event));
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
      if (event && typeof event === 'object') {
        console.log('üìã event.name:', event.name);
        console.log('üìã event.stateName:', event.stateName);
        console.log('üìã event.state:', event.state);
        console.log('üìã event.data:', event.data);
        console.log('üìã event.type:', event.type);
        console.log('üìã event.target:', event.target);
        console.log('üìã event.detail:', event.detail);
        console.log('üìã event.machine:', event.machine);
        console.log('üìã event.stateMachine:', event.stateMachine);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ event —ç—Ç–æ –º–∞—Å—Å–∏–≤
        if (Array.isArray(event)) {
          console.log('üìã Event is array, length:', event.length);
          event.forEach((item, index) => {
            console.log(`üìã Array item ${index}:`, item);
            if (item && typeof item === 'object') {
              console.log(`üìã Array item ${index} keys:`, Object.keys(item));
              console.log(`üìã Array item ${index} name:`, item.name);
              console.log(`üìã Array item ${index} stateName:`, item.stateName);
            }
          });
        }

        // –ì–ª—É–±–æ–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ÔøΩÔøΩ—Å–µ—Ö —Å–≤–æ–π—Å—Ç–≤
        for (const [key, value] of Object.entries(event)) {
          console.log(`üìã ${key} (${typeof value}):`, value);
          if (value && typeof value === 'object' && !Array.isArray(value)) {
            console.log(`üìã ${key} properties:`, Object.keys(value));
          }
        }
      }

      // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
      const eventStrings = [];
      if (event?.name) eventStrings.push(String(event.name));
      if (event?.stateName) eventStrings.push(String(event.stateName));
      if (event?.state) eventStrings.push(String(event.state));

      // –í–ê–ñ–ù–û: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º event.data –∫–∞–∫ –º–∞—Å—Å–∏–≤ (—Ä–µ–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö)
      if (event?.data && Array.isArray(event.data)) {
        console.log('üéØ Processing event.data array:', event.data);
        event.data.forEach(item => {
          if (typeof item === 'string') {
            eventStrings.push(item);
            console.log('üéØ Added from data:', item);
          }
        });
      }

      if (Array.isArray(event)) {
        event.forEach(item => {
          if (item?.name) eventStrings.push(String(item.name));
          if (item?.stateName) eventStrings.push(String(item.stateName));
        });
      }

      console.log('üîç All event strings:', eventStrings);

      // –ò—â–µ–º Timeline —Å–æ–±—ã—Ç–∏—è (—Ç–æ–ª—å–∫–æ Timeline 22-30 –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω)
      eventStrings.forEach(str => {
        if (str.includes('Timeline')) {
          console.log('üéØ TIMELINE FOUND:', str);

          // Timeline 21-30 –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω (–ù–ï Timeline 5-7 –∫–æ—Ç–æ—Ä—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏)
          if (str === 'Timeline 21') {
            console.log('üö™ Timeline 21 - Opening problem 21!');
            openProblemOverlay(21);
          } else if (str === 'Timeline 22') {
            console.log('üíß Timeline 22 - Opening problem 22!');
            openProblemOverlay(22);
          } else if (str === 'Timeline 23') {
            console.log('üí® Timeline 23 - Opening problem 23!');
            openProblemOverlay(23);
          } else if (str === 'Timeline 24') {
            console.log('‚è∏Ô∏è Timeline 24 - Opening problem 24!');
            openProblemOverlay(24);
          } else if (str === 'Timeline 25') {
            console.log('üåä Timeline 25 - Opening problem 25!');
            openProblemOverlay(25);
          } else if (str === 'Timeline 26') {
            console.log('ü•Å Timeline 26 - Opening problem 26!');
            openProblemOverlay(26);
          } else if (str === 'Timeline 27') {
            console.log('üî• Timeline 27 - Opening problem 27!');
            openProblemOverlay(27);
          } else if (str === 'Timeline 28') {
            console.log('üí¶ Timeline 28 - Opening problem 28!');
            openProblemOverlay(28);
          } else if (str === 'Timeline 29') {
            console.log('üîä Timeline 29 - Opening problem 29!');
            openProblemOverlay(29);
          } else if (str === 'Timeline 30') {
            console.log('‚ö° Timeline 30 - Opening problem 30!');
            openProblemOverlay(30);
          } else {
            console.log('üìä Other Timeline (ignored):', str);
          }
        }
      });

      console.log('üö® ===== RIVE STATECHANGE EVENT END =====');
    });

    // Handle mouse movement for Rive interactivity
    const handleMouseMove = (event: MouseEvent) => {
      if (!canvasRef.current || !riveInstanceRef.current) return;

      const rect = canvasRef.current.getBoundingClientRect();
      const x = event.clientX - rect.left;
      const y = event.clientY - rect.top;

      const normalizedX = x / rect.width;
      const normalizedY = y / rect.height;

      const stateMachine = riveInstanceRef.current.stateMachineInputs('State Machine 1');
      if (stateMachine) {
        const mouseXInput = stateMachine.find(input => input.name === 'mouseX' || input.name === 'Mouse X');
        const mouseYInput = stateMachine.find(input => input.name === 'mouseY' || input.name === 'Mouse Y');

        if (mouseXInput) {
          mouseXInput.value = normalizedX;
        }
        if (mouseYInput) {
          mouseYInput.value = normalizedY;
        }
      }
    };

    const canvas = canvasRef.current;
    canvas.addEventListener('mousemove', handleMouseMove);

    return () => {
      if (riveInstanceRef.current) {
        riveInstanceRef.current.cleanup();
      }
      if (canvas) {
        canvas.removeEventListener('mousemove', handleMouseMove);
      }
    };
  }, []);

  return (
    <div className="flex flex-col items-center">
      <canvas
        ref={canvasRef}
        className="rive-canvas"
        style={{
          width: '750px',
          height: '750px',
        }}
        width={1500}
        height={1500}
      />

      {/* REPAIR PRICES FRAME */}
      <RepairPrices
        selectedProblem={selectedProblem}
        onClose={closePriceFrame}
      />
    </div>
  );
}
